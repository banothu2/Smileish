doctype html
html
	head
		title= title
		link(rel='stylesheet', href='/stylesheets/style.css')

		link(rel='stylesheet', href='http://assets.ziggeo.com/css/ziggeo-betajs-player.min.css')
		script(src='http://assets.ziggeo.com/js/ziggeo-jquery-json2-betajs-player.min.js')


		script(src='//code.jquery.com/jquery-1.11.2.min.js')
		// Latest compiled and minified CSS
		link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css')
		// Optional theme
		link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap-theme.min.css')
		// Latest compiled and minified JavaScript
		script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js')
		link(href='stylesheets/page.css', rel='stylesheet')

		script.
			ZiggeoApi.token = "cadb6da3bc21c58a7cbe699685daf03d";

		style.
			video {

				background: rgba(255,255,255,0.5);
				border: 1px solid #ccc;
			}
			.grayscale {
				+filter: grayscale(1);
			}
			.sepia {
				+filter: sepia(1);
			}
			.blur {
				+filter: blur(3px);
			}

			html {
			position: relative;
			min-height: 100%;
			}
			div {
			color: white;
			}
			body {
			font: 10px sans-serif;
			shape-rendering: crispEdges;
			margin-bottom: 60px;
			background-color:#19B5FE;
			}
		script.

				//- window.addEventListener('DOMContentLoaded', function() {
				//- 	var v = document.getElementById('v');
				//- 	navigator.getUserMedia = (navigator.getUserMedia || 
				//- 		navigator.webkitGetUserMedia || 
				//- 		navigator.mozGetUserMedia || 
				//- 		navigator.msGetUserMedia);
				//- 	if (navigator.getUserMedia) {
				//- 		// Request access to video only
				//- 	}
				//- 	else {
				//- 	alert('Sorry, the browser you are using doesn\'t support getUserMedia');
				//- 	return;
				//- 	}
				//- });

				//- var videoSource = '';

				//- function startUserMedia(){
				//- 		navigator.getUserMedia(
				//- 			{
				//- 				video:true,
				//- 				audio:false
				//- 			},        
				//- 			function(stream) {
				//- 				var url = window.URL || window.webkitURL;
				//- 				v.src = url ? url.createObjectURL(stream) : stream;
				//- 				videoSource = v.src;
				//- 				document.getElementById("videoURL").innerHTML = "<p>" + videoSource + "</p>";

				//- 				v.play();
				//- 			},
				//- 			function(error) {
				//- 				alert('Something went wrong. (error code ' + error.code + ')');
				//- 				return;
				//- 			}
				//- 		);
				//- }

				//- function snapshotGrab(){
				//-   var video = document.querySelector('#v');
				//-   var canvas = document.querySelector('canvas');
				//-   var ctx = canvas.getContext('2d');
				//-   var localMediaStream = null;
				//-   function snapshot() {
				//-     if (videoSource) {
				//-       ctx.drawImage(video, 0, 0, 640, 900, 0, 0, 300, 300);
				//-       // "image/webp" works in Chrome.
				//-       // Other browsers will fall back to image/png.
				//-       console.log(canvas.toDataURL('image/webp'))
				//-       document.querySelector('img').src = canvas.toDataURL('image/webp');
				//-     }
				//-   }
				//-   snapshot();
				//- }



				// This code loads the IFrame Player API code asynchronously.
				var tag = document.createElement('script');
				tag.src = "https://www.youtube.com/iframe_api";
				var firstScriptTag = document.getElementsByTagName('script')[0];
				firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
				// This function creates an <iframe> (and YouTube player)
				// after the API code downloads.
				var player;
				function onYouTubeIframeAPIReady() {
					player = new YT.Player('player', {
						height: '780',
						width: '1280',
						videoId: 'ln8gGDYUo-4',
						events: {
							'onReady': initVideo,
							'onStateChange': onPlayerStateChange

							}
						}
					);
				}
				// The API will call this function when the video player is ready.
				function onPlayerReady(event) {
					//event.target.playVideo();
				}
				function playVideo(){
					player.playVideo();
					//- startUserMedia();
				}
				function pauseVideo(){
					player.pauseVideo();
				}
				// The API calls this function when the player's state changes.
				// The function indicates that when playing a video (state=1),
				// the player should play for six seconds and then stop.
				var done = false;

				function onPlayerStateChange(event) {
					if (event.data == 2 && !done) {
						window.location.href = "#container"
						stopRecording();
					}
				}

				function stopVideo() {
					player.stopVideo();
				}

				var videoDuration; 
				
				function initVideo(){
					videoDuration = player.getDuration();

					//document.getElementById("quickStats").innerHTML = "<p>" + videoDuration + " Seconds or " + Math.floor(videoDuration / 60) + " minutes</p>";
				}

	body
		.container#container(style='width: 350px')
			.page-header
				h1(align='center')
					//- object(width='70px', height='70px', type='image/svg+xml', data='archive12.svg')
					//- |           
					p  Smileish
					#replace_me


		.row
			.col-md-12
				#player
			.col-md-6



		//-#quickStats



		script.
			var embedding = ZiggeoApi.Embed.embed("#replace_me", {paramx: "value-x", paramy: "value-y", width:"320px", height:"200px"});
			function startRecoding(){
				embedding.record(); 
			}
			function stopRecording(){
				embedding.stopRecord();
			}
			ZiggeoApi.Events.on("submitted", function (data) {
				console.log(ZiggeoApi.Videos.source());
			});
			ZiggeoApi.Events.on("ready_to_record", function (data) {
				embedding.record();
				window.location.href="#player";
				setTimeout(function() { playVideo(); }, 3000);
				// Triggered when a video recorder is ready to record a video 
			});
			ZiggeoApi.Events.on("stop", function (data) {
				stopVideo();
				// Triggered when a playing video is stopped 
			});

			ZiggeoApi.Events.on("submitted", function (data) {
				// Triggered when a video has been recorded 
				console.log("here is ze data: ");
				console.log(data);
				console.log(data.video.token);
				console.log(ZiggeoApi.Videos.get(data.video.token))
				//window.location.href = "http://localhost:3000/";
			});


